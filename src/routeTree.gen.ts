/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import type { CreateFileRoute, FileRoutesByPath } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as SearchRouteImport } from './routes/search'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as BookingRouteImport } from './routes/booking'
import { Route as AboutRouteImport } from './routes/about'
import { Route as AuthRouteRouteImport } from './routes/auth/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as HotelsHotelIdRouteImport } from './routes/hotels/$hotelId'
import { Route as AuthRegisterRouteImport } from './routes/auth/register'
import { Route as AuthLoginRouteImport } from './routes/auth/login'

const SearchRoute = SearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const BookingRoute = BookingRouteImport.update({
  id: '/booking',
  path: '/booking',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const HotelsHotelIdRoute = HotelsHotelIdRouteImport.update({
  id: '/hotels/$hotelId',
  path: '/hotels/$hotelId',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/booking': typeof BookingRoute
  '/register': typeof RegisterRoute
  '/search': typeof SearchRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/hotels/$hotelId': typeof HotelsHotelIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/booking': typeof BookingRoute
  '/register': typeof RegisterRoute
  '/search': typeof SearchRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/hotels/$hotelId': typeof HotelsHotelIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/booking': typeof BookingRoute
  '/register': typeof RegisterRoute
  '/search': typeof SearchRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/hotels/$hotelId': typeof HotelsHotelIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/about'
    | '/booking'
    | '/register'
    | '/search'
    | '/auth/login'
    | '/auth/register'
    | '/hotels/$hotelId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/about'
    | '/booking'
    | '/register'
    | '/search'
    | '/auth/login'
    | '/auth/register'
    | '/hotels/$hotelId'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/about'
    | '/booking'
    | '/register'
    | '/search'
    | '/auth/login'
    | '/auth/register'
    | '/hotels/$hotelId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  AboutRoute: typeof AboutRoute
  BookingRoute: typeof BookingRoute
  RegisterRoute: typeof RegisterRoute
  SearchRoute: typeof SearchRoute
  HotelsHotelIdRoute: typeof HotelsHotelIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/booking': {
      id: '/booking'
      path: '/booking'
      fullPath: '/booking'
      preLoaderRoute: typeof BookingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/hotels/$hotelId': {
      id: '/hotels/$hotelId'
      path: '/hotels/$hotelId'
      fullPath: '/hotels/$hotelId'
      preLoaderRoute: typeof HotelsHotelIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

declare module './routes/index' {
  const createFileRoute: CreateFileRoute<
    '/',
    FileRoutesByPath['/']['parentRoute'],
    FileRoutesByPath['/']['id'],
    FileRoutesByPath['/']['path'],
    FileRoutesByPath['/']['fullPath']
  >
}
declare module './routes/auth/route' {
  const createFileRoute: CreateFileRoute<
    '/auth',
    FileRoutesByPath['/auth']['parentRoute'],
    FileRoutesByPath['/auth']['id'],
    FileRoutesByPath['/auth']['path'],
    FileRoutesByPath['/auth']['fullPath']
  >
}
declare module './routes/about' {
  const createFileRoute: CreateFileRoute<
    '/about',
    FileRoutesByPath['/about']['parentRoute'],
    FileRoutesByPath['/about']['id'],
    FileRoutesByPath['/about']['path'],
    FileRoutesByPath['/about']['fullPath']
  >
}
declare module './routes/booking' {
  const createFileRoute: CreateFileRoute<
    '/booking',
    FileRoutesByPath['/booking']['parentRoute'],
    FileRoutesByPath['/booking']['id'],
    FileRoutesByPath['/booking']['path'],
    FileRoutesByPath['/booking']['fullPath']
  >
}
declare module './routes/register' {
  const createFileRoute: CreateFileRoute<
    '/register',
    FileRoutesByPath['/register']['parentRoute'],
    FileRoutesByPath['/register']['id'],
    FileRoutesByPath['/register']['path'],
    FileRoutesByPath['/register']['fullPath']
  >
}
declare module './routes/search' {
  const createFileRoute: CreateFileRoute<
    '/search',
    FileRoutesByPath['/search']['parentRoute'],
    FileRoutesByPath['/search']['id'],
    FileRoutesByPath['/search']['path'],
    FileRoutesByPath['/search']['fullPath']
  >
}
declare module './routes/auth/login' {
  const createFileRoute: CreateFileRoute<
    '/auth/login',
    FileRoutesByPath['/auth/login']['parentRoute'],
    FileRoutesByPath['/auth/login']['id'],
    FileRoutesByPath['/auth/login']['path'],
    FileRoutesByPath['/auth/login']['fullPath']
  >
}
declare module './routes/auth/register' {
  const createFileRoute: CreateFileRoute<
    '/auth/register',
    FileRoutesByPath['/auth/register']['parentRoute'],
    FileRoutesByPath['/auth/register']['id'],
    FileRoutesByPath['/auth/register']['path'],
    FileRoutesByPath['/auth/register']['fullPath']
  >
}
declare module './routes/hotels/$hotelId' {
  const createFileRoute: CreateFileRoute<
    '/hotels/$hotelId',
    FileRoutesByPath['/hotels/$hotelId']['parentRoute'],
    FileRoutesByPath['/hotels/$hotelId']['id'],
    FileRoutesByPath['/hotels/$hotelId']['path'],
    FileRoutesByPath['/hotels/$hotelId']['fullPath']
  >
}

interface AuthRouteRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  AboutRoute: AboutRoute,
  BookingRoute: BookingRoute,
  RegisterRoute: RegisterRoute,
  SearchRoute: SearchRoute,
  HotelsHotelIdRoute: HotelsHotelIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
